<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lwk.bysj.mapper.UserMapper">

    <resultMap id="BaseResultMap" type="com.lwk.bysj.pojo.User">
        <id column="uid" property="uid" jdbcType="INTEGER"/>
        <result column="account" property="account" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="user_name" property="userName" jdbcType="VARCHAR"/>
        <result column="gender" property="gender" jdbcType="INTEGER"/>
        <result column="id_num" property="idNum" jdbcType="VARCHAR"/>
        <result column="age" property="age" jdbcType="INTEGER"/>
        <result column="tel_num" property="telNum" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="state" property="state" jdbcType="INTEGER"/>
        <association property="role" javaType="role">
            <id column="id" property="id" jdbcType="INTEGER"/>
            <result column="role_name" property="rolename" jdbcType="VARCHAR"/>
            <result column="description" property="description" jdbcType="VARCHAR"/>
            <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
            <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
            <collection property="perms" ofType="permission">
                <id column="id" property="id" jdbcType="INTEGER"/>
                <result column="permission_id" property="permissionId" jdbcType="VARCHAR"/>
                <result column="perm_name" property="permname" jdbcType="VARCHAR"/>
                <result column="description" property="description" jdbcType="VARCHAR"/>
                <result column="perms" property="perms"/>
            </collection>
        </association>
    </resultMap>
    <cache type="com.lwk.bysj.util.RedisCacheUtil"/>
    <sql id="Base_Column_List">
        u.uid, u.account, u.password, u.user_name, u.gender, u.id_num, u.age, u.tel_num, u.email, u.state
    </sql>

    <sql id="Colum_Role">
        r.id, r.role_name, r.description, r.create_time, r.update_time
    </sql>
    <!--通过账号找密码(验证登录)-->
    <select id="selectPasswordByAccount" useCache="false" resultType="java.lang.String">
        select password
        from tb_user
        where account = #{account}
    </select>
    <!--通过账号密码找用户(登录)-->
    <select id="selectByAccountAndPassword" useCache="false" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>,
        <include refid="Colum_Role"/>
        from tb_user u LEFT JOIN tb_user_role ur ON u.uid=ur.user_id LEFT JOIN tb_role r ON ur.role_id=r.id
        where account = #{account} and password=#{password}
    </select>

    <!--修改密码-->
    <update id="updatePwdByByPrimary">
        update tb_user
        set password = #{newPwd}
        where uid = #{uid}
    </update>
    <!--查询全部用户-->
    <select id="selectAllUsers" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>,
        <include refid="Colum_Role"/>
        from tb_user u LEFT JOIN tb_user_role ur ON u.uid=ur.user_id LEFT JOIN tb_role r ON ur.role_id=r.id order by r.role_name desc
    </select>
<!--用户身份验证-->
    <select id="selectPwdByInfo" useCache="false" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from tb_user u where account=#{account} and email=#{email} and user_name=#{userName} and id_num=#{idNum}
    </select>
<!--身份验证之后修改密码-->
    <update id="updatePwdById">
        update tb_user
        set password = #{newPwd}
        where uid = #{u.uid}
    </update>
<!--通过账号查找用户-->
    <select id="selectAccount" useCache="false" resultMap="BaseResultMap" parameterType="java.lang.String">
        select account
        from tb_user
        where account = #{account}
    </select>

<!--通过账号找用户信息-->
    <select id="selectByAccount" useCache="false" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Colum_Role"/>
        from tb_user u LEFT JOIN tb_user_role ur ON u.uid=ur.user_id LEFT JOIN tb_role r ON ur.role_id=r.id
        where account = #{account}
    </select>
<!--管理员冻结用户-->
    <update id="adminBanUserById" parameterType="Integer">
        update tb_user
        set state = 2
        where uid = #{uid}
    </update>
<!--管理员重置用户密码-->
    <update id="adminChangeUserPwd">
        update tb_user
        set password=#{pwd}
        where uid = #{uid}
    </update>
<!--管理员解冻用户-->
    <update id="adminUNbanUserById" parameterType="Integer">
        update tb_user
        set state = 1
        where uid = #{uid}
    </update>


    <!--    查询未冻结用户-->
    <select id="selectUnLockUser" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>,
        <include refid="Colum_Role"/>
        from tb_user u LEFT JOIN tb_user_role ur ON u.uid=ur.user_id LEFT JOIN tb_role r ON ur.role_id=r.id
        where state = 1 order by r.role_name desc
    </select>
    <!--    查询冻结用户-->
    <select id="selectLocedkUser" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>,
        <include refid="Colum_Role"/>
        from tb_user u LEFT JOIN tb_user_role ur ON u.uid=ur.user_id LEFT JOIN tb_role r ON ur.role_id=r.id
        where state = 2 order by r.role_name desc
    </select>

    <!--  通过搜索框按条件查询用户  -->
    <select id="selectByCondition" useCache="false" parameterType="user" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>,
        <include refid="Colum_Role"/>
        from tb_user u LEFT JOIN tb_user_role ur ON u.uid=ur.user_id LEFT JOIN tb_role r ON ur.role_id=r.id
        <where>
            <if test="uid !=null">
                u.uid=#{uid}
            </if>
            <if test="userName !=null">
                u.user_name=#{userName}
            </if>
        </where>
        order by r.role_name desc
    </select>

<!--    批量删除-->
    <delete id="deleteTbUr">
        delete from tb_user_role where user_id in
        <foreach item="item" collection="array" open="(" separator="," close=")">
            ${item}
        </foreach>
    </delete>
    <delete id="deleteByUserIds">
        delete from tb_user where uid in
        <foreach item="item" collection="array" open="(" separator="," close=")">
            ${item}
        </foreach>
    </delete>

    <!--==========================分界线==========================-->

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from tb_user
        where uid = #{uid,jdbcType=INTEGER}
    </delete>
    <insert id="insert" keyProperty="uid" parameterType="com.lwk.bysj.pojo.User">
        insert into tb_user (uid, account, password,
                             user_name, gender, id_num,
                             age, tel_num, email)
        values (#{uid,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
                #{userName,jdbcType=VARCHAR}, #{gender,jdbcType=INTEGER}, #{idNum,jdbcType=VARCHAR},
                #{age,jdbcType=INTEGER}, #{telNum,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR});
    </insert>

    <insert id="insertSelective" parameterType="com.lwk.bysj.pojo.User">
        insert into tb_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="uid != null">
                uid,
            </if>
            <if test="account != null">
                account,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="userName != null">
                user_name,
            </if>
            <if test="gender != null">
                gender,
            </if>
            <if test="idNum != null">
                id_num,
            </if>
            <if test="age != null">
                age,
            </if>
            <if test="telNum != null">
                tel_num,
            </if>
            <if test="email != null">
                email,
            </if>
            <if test="state != null">
                state,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="uid != null">
                #{uid,jdbcType=INTEGER},
            </if>
            <if test="account != null">
                #{account,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="gender != null">
                #{gender,jdbcType=INTEGER},
            </if>
            <if test="idNum != null">
                #{idNum,jdbcType=VARCHAR},
            </if>
            <if test="age != null">
                #{age,jdbcType=INTEGER},
            </if>
            <if test="telNum != null">
                #{telNum,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="state != null">
                #{state,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.lwk.bysj.pojo.User">
        update tb_user
        <set>
            <if test="account != null">
                account = #{account,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="userName != null">
                user_name = #{userName,jdbcType=VARCHAR},
            </if>
            <if test="gender != null">
                gender = #{gender,jdbcType=INTEGER},
            </if>
            <if test="idNum != null">
                id_num = #{idNum,jdbcType=VARCHAR},
            </if>
            <if test="age != null">
                age = #{age,jdbcType=INTEGER},
            </if>
            <if test="telNum != null">
                tel_num = #{telNum,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="state != null">
                state = #{state,jdbcType=INTEGER},
            </if>
        </set>
        where uid = #{uid,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.lwk.bysj.pojo.User">
        update tb_user
        set account   = #{account,jdbcType=VARCHAR},
            password  = #{password,jdbcType=VARCHAR},
            user_name = #{userName,jdbcType=VARCHAR},
            gender    = #{gender,jdbcType=INTEGER},
            id_num    = #{idNum,jdbcType=VARCHAR},
            age       = #{age,jdbcType=INTEGER},
            tel_num   = #{telNum,jdbcType=VARCHAR},
            email     = #{email,jdbcType=VARCHAR},
            state     = #{state,jdbcType=INTEGER}
        where uid = #{uid,jdbcType=INTEGER}
    </update>
</mapper>